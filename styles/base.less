@import "syntax-variables";

:host, atom-text-editor {
  background-color: @syntax-background-color;
  color: @syntax-text-color;

  .wrap-guide {
    background-color: @syntax-wrap-guide-color;
  }

  .indent-guide {
    color: @syntax-indent-guide-color;
  }

  .invisible-character {
    color: @syntax-invisible-character-color;
  }

  .gutter {
    background-color: @syntax-gutter-background-color;
    color: @syntax-gutter-text-color;

    .line-number {
      &.cursor-line {
        background-color: @syntax-gutter-background-color-selected;
        color: @syntax-gutter-text-color-selected;
      }

      &.cursor-line-no-selection {
        color: @syntax-gutter-text-color-selected;
      }
    }
  }

  .gutter .line-number.folded,
  .gutter .line-number:after,
  .fold-marker:after {
    color: @light-gray;
  }

  .invisible {
    color: @syntax-text-color;
  }

  .cursor {
    color: @syntax-cursor-color;
  }

  .selection .region {
    background-color: @syntax-selection-color;
  }
}

atom-text-editor .search-results .marker .region {
  background-color: transparent;
  border: 1px solid @syntax-result-marker-color;
}

atom-text-editor .search-results .marker.current-result .region {
  border: 1px solid @syntax-result-marker-color-selected;
}

.comment {
  color: @comment-color;
  background-color: @comment-background-color;
}

.keyword {
  color: @keyword-color;

  &.control {
    color: @keyword-color;
  }

  &.operator {
    color: @operator-color;
  }

  &.other.special-method {
    color: @keyword-special-method-color;
  }
}

.storage {
  color: @storage-color;

  &.type.class,
  &.modifier { // Java's public, private modifiers, class keywords...
    color: @keyword-color;
  }

  &.type.generic &.type,
  &.type.token &.type { // Java's generics
    color: @storage-generic-color;
  }

  &.control {
    // don't know exactly what it stands for, but Clojure's grammar uses it for
    // if, try, catch, fn...
    color: @storage-control-color;
  }

  &.modifier.import,
  &.modifier.package, { // Java's package and import statements
    color: @variable-color;
  }

  &.type.annotation { // Java's annotations
    color: @annotation-color;
  }
}

.constant {
  color: @constant-color;

  &.keyword { // Clojure's keywords are rendered here
    color: @constant-keyword-color;
  }

  &.character.escape,
  &.escape {
    color: @cyan;
  }

  &.numeric {
    color: @constant-color;
  }

  &.regexp {
    color: @regexp-color;
  }

  &.other.color {
    color: @cyan;
  }

  &.other.symbol {
    color: @green;
  }
}

.variable {
  color: @variable-color;

  &.interpolation {
    color: darken(@variable-color, 10%);
  }

  &.parameter {
    color: @variable-parameter-color;
  }

  &.instance {
    color: @variable-instance-color;
  }

  &.other {
    color: @variable-other-color;
  }
}

.invalid.illegal {
  background-color: @red;
  color: @syntax-background-color;
}

.string {
  color: @string-color;
  background-color: @string-background-color;

  &.regexp {
    color: @regexp-color;
    background-color: @regexp-background-color;

    .source.ruby.embedded {
      color: @orange;
    }
  }

  &.other.link {
    color: @blue;
  }
}

.punctuation {
  &.definition {
    &.comment {
      color: @comment-color;
      background-color: @comment-background-color;
    }

    &.string {
      color: @string-color;
      background-color: @string-background-color;
    }

    &.variable,
    &.parameters,
    &.array {
      color: @operator-color;
    }

    &.heading,
    &.identity {
      color: @blue;
    }

    &.bold {
      color: @light-orange;
      font-style: bold;
    }

    &.italic {
      color: @purple;
      font-style: italic;
    }
  }

  &.section.embedded {
    color: darken(@red, 10%);
  }

  &.separator,
  &.terminator {
    color: @operator-color;
  }
}

.support {
  &.class {
    color: @storage-color;
  }

  &.function  {
    color: @function-color;

    &.any-method {
      color: @function-color;
    }
  }

  &.type {
    color: @storage-color;
  }
}

.entity {
  &.name.function,
  &.global {
    color: @function-color;
  }

  &.name.type,
  &.name.class,
  &.name.type.class {
    color: @storage-color;
  }

  &.name.section {
    color: @blue;
  }

  &.name.tag {
    color: @tag-color;
  }

  &.other.inherited-class {
    color: @storage-color;
  }

  &.other.attribute-name {
    color: @attribute-name-color;

    &.id {
      color: @attribute-id-color;
    }
  }
}

.meta {
  &.class {
    color: @light-orange;
  }

  &.class.body,
  &.method.body {
    color: @syntax-text-color;
  }

  &.method-call .method {
    color: @function-color;
  }

  &.function {
    color: @function-color;
  }

  &.link {
    color: @orange;
  }

  &.require {
    color: @blue;
  }

  &.selector {
    color: @purple;
  }

  &.separator {
    background-color: @gray;
    color: @syntax-text-color;
  }

  &.brace {
    color: @operator-color;
  }

  &.quoted-expression {
    background-color: @macro-background-color;
  }
}

.none {
  color: @syntax-text-color;
}

.markup {
  &.bold {
    color: @orange;
    font-style: bold;
  }

  &.changed {
    color: @purple;
  }

  &.deleted {
    color: @red;
  }

  &.italic {
    color: @purple;
    font-style: italic;
  }

  &.heading .punctuation.definition.heading {
    color: @blue;
  }

  &.inserted {
    color: @green;
  }

  &.list {
    color: @red;
  }

  &.quote {
    color: @orange;
  }

  &.raw.inline {
    color: @green;
  }
}

.source.gfm .markup {
  -webkit-font-smoothing: auto;
  &.heading {
    color: @green;
  }
}

atom-text-editor[mini] .scroll-view {
  padding-left: 1px;
}
